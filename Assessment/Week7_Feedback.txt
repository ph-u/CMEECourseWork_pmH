Starting weekly assessment for Pok Man, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 560.34 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, seminar, Week5, Week2, Week9, Week4, .git, ReadmeProg, Week3, MiniProject

Found the following files in parent directory: README.txt, LICENSE, .gitignore, readme.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
._*
*.sw*
nohup*
.Rhistory
readme_final.md
*.*#
*-*.pdf
*-concordance.tex
*.log
*.synctex.gz
.Rapp.history
*.mov
*.mp4
*.gif
p_*
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
PokMan Ho CMEE Coursework Repository
Do I like this better?
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Sandbox, results

Found the following files: readme.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:
**********************************************************************
![alt text](https://unichoices.co.uk/wp-content/uploads/2015/09/Imperial-College-London.jpg)

# 2019 PokMan HO MRes CMEE Coursework Week7

This week's foci were on:  R ipynb py 

## License

Apache-2.0

## Guides

Multiple scripts were coded and introduced below in filename alphabetical order.  
All scripts are in `Code` directory

### DrawFW.py

#### Features

network analysis in python3

#### Suggested input

```
python3 DrawFW.py
```

#### Output

network graph in `results` subdirectory
*****

### LV1.py

#### Features

Consumer-Resource cycle plotting

#### Suggested input

```
python3 LV1.py
```

#### Output

two graphical outputs in `results` subdirectory
*****

### LV2.py

#### Features

Consumer-Resource cycle plotting

#### Suggested input

```
python3 LV2.py
```

#### Output

1. two graphical outputs in `results` subdirectory
2. final numbers terminal output

*****

### LV3.py

#### Features

Consumer-Resource cycle plotting, discrete-time model

#### Suggested input

```
python3 LV3.py
```

#### Output

1. two graphical outputs in `results` subdirectory
2. final numbers terminal output

*****

### LV4.py

#### Features

Consumer-Resource cycle plotting, discrete-time model with gaussian/normal distribution

#### Suggested input

```
python3 LV4.py
```

#### Output

1. two graphical outputs in `results` subdirectory
2. final numbers terminal output

*****

### LV5.py

#### Features

Consumer-Resource cycle plotting, discrete-time model with gaussian/normal distribution in both players

#### Suggested input

```
python3 LV5.py
```

#### Output

1. two graphical outputs in `results` subdirectory
2. final numbers terminal output

*****

### Nets.py

#### Features

plot university network linkages

#### Suggested input

```
python3 Nets.py
```

#### Output

one graphical output in `results` subdirectory
*****

### TestR.R

#### Features

sample Rscript for python3 subprocess test

#### Suggested input

```
Rscript TestR.R
```

#### Output

terminal output
*****

### TestR.py

#### Features

test call on TestR.R

#### Suggested input

```
python3 TestR.py
```

#### Output

none
*****

### blackbirds.py

#### Features

homework on blackbirds

#### Suggested input

```
python3 blackbirds.py
```

#### Output

terminal output
*****

### fmr.R

#### Features

graph-plotting in R

#### Suggested input

```
Rscript fmr.R
```

#### Output

pdf graph in `results` subdirectory
*****

### profileme.py

#### Features

timing code run-time

#### Suggested input

```
python3 profileme.py
```

#### Output

terminal output on timed code report
*****

### profileme2.py

#### Features

timing code run-time

#### Suggested input

```
python3 profileme2.py
```

#### Output

terminal output on timed code report
*****

### regexs.py

#### Features

regular expression classwork

#### Suggested input

```
python3 regexs.py
```

#### Output

terminal output
*****

### run_LV.py

#### Features

profiling and export outputs

#### Suggested input

```
python3 run_LV.py
```

#### Output

terminal outputs
*****

### run_fmr_R.py

#### Features

call fmr.R from python3 terminal environment

#### Suggested input

```
python3 run_fmr_R.py
```

#### Output

terminal output
*****

### simply_trial.ipynb

#### Features
classwork trial of Jupyter notebook

#### Suggested input

```
None
```

#### Output
interactive Jupyter notebook output
*****

### timeitme.py

#### Features

timing trials

#### Suggested input

```
python3 timeitme.py
```

#### Output

terminal output on timing within python shells
*****

### using_os.py

#### Features

trial on python3 os package

#### Suggested input

```
python3 using_os.py
```

#### Output

terminal output
*****

## Reference

[https://docs.readme.com/docs/best-practices][01]  
[https://github.com/jehna/readme-best-practices/blob/master/README-default.md][02]  

[01]:https://docs.readme.com/docs/best-practices
[02]:https://github.com/jehna/readme-best-practices/blob/master/README-default.md**********************************************************************

Found following files in results directory: LV3_model2.pdf, LV2_model2.pdf, LV5_model2.pdf, LV5_model1.pdf, LV4_model1.pdf, LV1_model1.pdf, LV4_model2.pdf, LV2_model1.pdf, LV3_model1.pdf, LV1_model2.pdf...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 21 code files: TestR.py, regexs.py, LV3.py, profileme2.py, timeitme.py, blackbirds.py, simply_trial.ipynb, Nets.py, TestR.R, profileme.py, LV4.py, fmr.R, using_os.py, LV1.py, LV5.py, DrawFW.py, run_fmr_R.py, run_LV.py, LV2.py, simply_trial-checkpoint.ipynb, Data_in_python3-checkpoint.ipynb

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: TestR.py
# Desc: test call on TestR.R
# Input: python3 TestR.py
# Output: none
# Arguments: 0
# Date: Nov 2019


"""test call on TestR.R"""

__appname__="TestR.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()

**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.13570s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: regexs.py
# Desc: regular expression classwork
# Input: python3 regexs.py
# Output: terminal output
# Arguments: 0
# Date: Nov 2019


"""regular expression classwork"""

__appname__="regexs.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import re

match = re.search(r'2', "it takes 2 to tango");match.group()
match = re.search(r'\d', "it takes 2 to tango");match.group()
match = re.search(r'\d.*', "it takes 2 to tango");match.group()
match = re.search(r'\s\w{1,3}\s', "once upon a time");match.group()
match = re.search(r'\s\w*$', "once upon a time");match.group()
re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()
re.search(r'^\w*.*\s', 'once upon a time').group()
re.search(r'<.+>', 'This is a <EM>first</EM> test').group()
re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()
re.search(r'\d*.?\d*', '1432.75+60.22i').group()
re.search(r'[ATGC]+', 'the sequence ATTCGT').group()
re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

MyStr='Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecology theory'
match=re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
match.group()

MyStr='Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecology theory'
re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr).group()

MyStr='Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecology theory'
match=re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()
match.group(0)

match=re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s&]+)", MyStr)
if match:
    print(match.group(0))
    print(match.group(1))
    print(match.group(2))
    print(match.group(3))

MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"
emails = re.findall(r'[\w \. -]+@[\w\.-]+', MyStr)
for email in emails:
    print(email)
found_matches = re.findall(r"([\w \s]+), ([\w \. -]+@[\w \. -]+)", MyStr) ## regex space character: either \s or " "
found_matches

f = open("../Data/TestOaksData.csv", 'r')
found_oaks = re.findall(r"Q[\w\s].*\s", f.read())
found_oaks

import urllib3
import scipy as sc

conn = urllib3.PoolManager() ## open a connection
r = conn.request("Get", "https://www.imperial.ac.uk/silwood-park/academic-staff/")
webpage_html = r.data ## read in web contents
type(webpage_html)
My_Data = webpage_html.decode()
pattern = r"Dr[\s \']+\w+[\s \']+\w+|Prof[\s \']+\w+[\s \']+\w+"
regex=re.compile(pattern) ## example use of re.compile(); can also ignore case with re.IGNORECASE
mm=[]
for match in regex.finditer(My_Data):
    mm.append(match.group())

mm=sc.unique(mm)
mm.sort()
for i in range(len(mm)):
    print(mm[i])

**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00660s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: LV3.py
# Desc: Consumer-Resource cycle plotting, discrete-time model
# Input: python3 LV3.py
# Output: 1. two graphical outputs in `results` subdirectory; 2. final numbers terminal output
# Arguments: 0
# Date: Nov 2019


"""Consumer-Resource cycle plotting, discrete-time model"""

__appname__="LV3.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import sys
import scipy as sc
import matplotlib.pylab as p

## sys argv imput
if len(sys.argv) < 4:
    print("not enough inputs, using defaults")
    print("r=1  a=0.1  z=1.5  e=0.75")
    r=1.;a=.1;z=1.5;e=.75
else:
    r=float(sys.argv[1]) ## intrinsic (per-capita) growth rate
    a=float(sys.argv[2]) ## per-capita "search-rate" for resource
    z=float(sys.argv[3]) ## mortality rate
    e=float(sys.argv[4]) ## consumer's efficiency for resource -> biomass

def LV():
    """adaptation for cProfile"""
    ## function
    def dCR_dt(pop, t):
        """Lotka-Volterra model, discrete time"""
        R=pop[0]
        C=pop[1]
        R1=R*(1+r*(1-R/K)-a*C)
        C1=C*(1-z+e*a*R)
        ## dimension analysis required (unit balance)
        ## automatically determine min time steps needed
        return sc.array([R1, C1])

    ## set initial start parameters
    t=sc.linspace(0,15,1e3)
    K=33 ## max 40, carrying capacity
    pops=sc.zeros(((len(t)),2))
    pops[0,:]=[10,5] ## initial population of resource & consumers
    for i in range(1,len(t)):
        pops[i,:]=dCR_dt(pops[(i-1),:],t[i])
        if pops[i,0] > K:
            pops[i,0]=K
        elif pops[i,0] < 0:
            pops[i,0]=0
        if pops[i,1] > K:
            pops[i,1]=K
        elif pops[i,1] < 0:
            pops[i,1]=0

    f1=p.figure(num=1);f1
    p.plot(t,pops[:,0], 'g-', label="Resource density") ## plot green line as 1st graphic entry
    p.plot(t,pops[:,1], "b-", label="Consumer density")
    p.grid()
    p.legend(loc="best")
    p.xlabel("Time")
    p.ylabel("Population density")
    p.title("Consumer-Resource population dynamics")
    ## text string for text box in graph
    tex='\n'.join((
        r'$r = %.2f$ time$^{-1}$' %(r, ),
        r'$a = %.2f$ area * time$^{-1}$' %(a, ),
        r'$z = %.2f$ time$^{-1}$' %(z, ),
        r'$e = %.2f$ [no unit]' %(e, )
    ))
    box=dict(boxstyle="round", facecolor="white",alpha=.8)

    p.text(9,max(pops[:,0])*.1,tex,bbox=box) ## <https://matplotlib.org/3.1.1/gallery/recipes/placing_text_boxes.html>
    # p.show()

    f2=p.figure(num=2);f2
    p.plot(pops[:,0],pops[:,1],'r-')
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.title("Consumer-Resource population dynamics")
    # p.show()

    f1.savefig("../results/LV3_model1.pdf")
    f2.savefig("../results/LV3_model2.pdf")

    ## print final values
    print("final Consumer population:",round(pops[(pops.shape[0]-1),1], 2), "individuals / units at time",t[len(t)-1])
    print("final Resource population:",round(pops[(pops.shape[0]-1),0], 2), "individuals / units at time",t[len(t)-1])

LV()
**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
not enough inputs, using defaults
r=1  a=0.1  z=1.5  e=0.75
final Consumer population: 3.94 individuals / units at time 15.0
final Resource population: 20.0 individuals / units at time 15.0

**********************************************************************

Code ran without errors

Time consumed = 1.00923s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: profileme2.py
# Desc: timing code run-time
# Input: python3 profileme2.py
# Output: terminal output on timed code report
# Arguments: 0
# Date: Nov 2019


"""timing code run-time"""

__appname__="profileme2.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

def my_squares(iters):
    """list comprehension on squaring function"""
    out=[i**2 for i in range(iters)]
    return out

def my_join(iters, string):
    """for loop on joining textstrings"""
    out=""
    for i in range(iters):
        out+=string.join(", ")
    return out

def run_my_funcs(x,y):
    """printing results"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(int(1e7),"My string")**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.00074s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: timeitme.py
# Desc: timing trials
# Input: python3 timeitme.py
# Output: terminal output on timing within python shells
# Arguments: 0
# Date: Nov 2019


"""timing trials"""

__appname__="timeitme.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

## loops vs list comprehensions
iters=int(1e6)

import timeit
from profileme import my_squares as my_squares_loops
from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)

## loops vs join method for strings
mystring = "mystring"

from profileme import my_join as my_join_join
from profileme2 import my_join as my_join

# %timeit my_join_join(iters, mystring)
# %timeit my_join(iters, mystring)

import time
start=time.time()
my_squares_loops(iters)
print("my_squares_loops tskrd %f s to run." %(time.time()-start))
print("my_squares_lc takes %f to run" %(time.time()-start))
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00497s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: blackbirds.py
# Desc: homework on blackbirds
# Input: python3 blackbirds.py
# Output: terminal output
# Arguments: 0
# Date: Nov 2019


"""homework on blackbirds"""

__appname__="blackbirds.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import re

# Read the file (using a different, more python 3 way, just for fun!)
with open('../Data/blackbirds.txt', 'r') as f: text = f.read()

# replace \t's and \n's with a spaces:
# text = text.replace('\t',' ')
# text = text.replace('\n',' ')
# You may want to make other changes to the text.
text=re.sub(r'\s+', " ", text).strip() ## <https://stackoverflow.com/questions/2077897/substitute-multiple-whitespace-with-single-whitespace-in-python>

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.
kd=re.findall(r'Kingdom [A-Za-z]+|Phylum [A-Za-z]+|Species [A-Za-z]+ [a-z]+', text)
for i in range(len(kd)): print(kd[i])
# kd=re.findall(r'(Kingdom [A-Za-z]+)|(Phylum [A-Za-z]+)|(Species [A-Za-z]+ [a-z]+)', text)
# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there are multiple ways to skin this cat! Your solution could involve multiple regular expression calls (easier!), or a single one (harder!)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Kingdom Animalia
Phylum Chordata
Species Euphagus carolinus
Kingdom Animalia
Phylum Chordata
Species Euphagus cyanocephalus
Kingdom Animalia
Phylum Chordata
Species Turdus boulboul
Kingdom Animalia
Phylum Chordata
Species Agelaius assimilis

**********************************************************************

Code ran without errors

Time consumed = 0.03043s

======================================================================
Inspecting script file simply_trial.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:49.307149Z",
     "start_time": "2019-11-15T12:07:49.298725Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.613272Z",
     "start_time": "2019-11-15T12:07:50.067720Z"
    }
   },
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.672448Z",
     "start_time": "2019-11-15T12:07:53.664111Z"
    }
   },
   "outputs": [],
   "source": [
    "x=var('x')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.733934Z",
     "start_time": "2019-11-15T12:07:53.728262Z"
    }
   },
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.779776Z",
     "start_time": "2019-11-15T12:07:53.775490Z"
    }
   },
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## bio cal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:09:00.972073Z",
     "start_time": "2019-11-15T12:09:00.965699Z"
    }
   },
   "outputs": [],
   "source": [
    "r_m, N, t = var(\"r_m N t\", real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:09:11.307036Z",
     "start_time": "2019-11-15T12:09:11.302289Z"
    }
   },
   "outputs": [],
   "source": [
    "N=Function(\"N\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:11:44.194164Z",
     "start_time": "2019-11-15T12:11:44.100282Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle - r_{m} N{\\left(t \\right)} + \\frac{d}{d t} N{\\left(t \\right)}$"
      ],
      "text/plain": [
       "           d       \n",
       "-rₘ⋅N(t) + ──(N(t))\n",
       "           dt      "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t)-r_m*N(t)\n",
    "dN_dt\n",
    "## cal N at any given time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:14:50.878582Z",
     "start_time": "2019-11-15T12:14:50.409951Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHwAAAAaCAYAAAB1szj5AAAABHNCSVQICAgIfAhkiAAABVNJREFUaIHtmXuIVFUcxz+7iu7mikVUJhplabX0sNQ1wtYiKbIgKLIy0rSI2HZ7CP5REUkRbVqUFq4JoYUhrWulUdEWUUqQpWZpmr3UdK20tqzcrF2d/view5zunvuYaWZW5X7hMjO/1/2de+7vdQZSpEhxRGA28HaQWN4DjqTID71zlK8BPi6GIy5eAHYD/XLQGQlkgNuK4tHhicHomdwAvAfsB6Yl1O0D/GP07bUpSqHVERwZIrPA8K9xaKOBg8D0EJ17jc4kD+9V4AegKsqxEmEY8BiwFtgDdJrPd4E64KgS+HAlelafAhOAU4FjE+qWkw2iGmAgcEyUwi9kN/zxEJl1hn+SQ2sFfgMqQ3QWG53TPbwaw7s/yrEiowx4hGx0fAg0AY3AErLPZVUJfHkA+As4LU/9q4Df0ZoiMRQt6hOgDfjOI9MXPZSfHNpwFN0LImxvBv6IcGIzsJ2e6ysWorV/AZzr4VeijVhYAl+agWX/Q/9BEr6YE9Gi5wFzzffRARkbjW86tEZDu9Rj0/J8182O3EOGdnkSRwuM6WRrXf8Y2bAMlgTXAm8BP6Og+RpltV4Bua+Auzz6K4A5wEfAFrQXy1Gg1Dlyy9D+xWIWWvg04CLzfXZAps7QH3Zoa4Au/M3aRGAR2TQ507mGOHLjjcwTSRwtIE5E6bMTOKtI9+iFykIGbXIT8DTatAxqdi36AQeAsR47W4Fbzfd5wAfoBR2KsrLFN4Q0wcFWf5T5XANsBHYB1wEzQmSsgyNQSt7nuUczcDQwBS0sLO1bh2tD+C7uMTaTYj3wWoStCvRSbszBZi6YgzruRpRuuwx9BvA+MBn1S5uAcwxvfcBGf1QOn3doc1GZPB7VbIvewBnAIKAD9VbdUGYYHWRfBJvWxzhynxvaIPN7uPndGrZaYL6RGRUhA4q0H2NkALYRXiZ816IIWzbKLklw33wwBvU3YS/c7eb+U83vO4AvPXIXAEud36vQ+AZwNcoYFjcBO819m1wjboQPAwag+mDfwKVAA0rLq1H9qkYj1C4jY8eFX0MWBHA+SpkbImQA2oETYmQATk4gkwRVZF/Y1QWyGUQDCqYOVMaCsGXENqvzzRXE2SjYLAajTbU899m+ZK5ITEILf8ahlaON3W6cvtDIrHBkRhja8hC7vVHkBlOUD+0oRZUKpyDfvSkvBrXoObQZG7eEyO0mWRYaH3O/uSiSQb3PSof3MmrgYuFGuE23ax3aQdTx1aOUEqzfoAVB+MFANaqR62J8KUd1eWuMHBSuhtueoxI1VgdysFmFav6L5vKhAjgObc64HGz74HbtO/hvr3N9PgZXojct2KnWGvpTaGEZdPpjUYY2fU+I3clGpyHm/mcauSTz5zYKV8OtLd9I6SLqfOBP/BFeSXa2P6RQjlLpPrrPhOWoZu9AnXgGdYUuWgzddzJkj1SnxPgw1cjV5+J4AXC3ue8W1NkGUQZcgaaNMIRtOMBndD+GdjGW7s+86KgmOyf78CzZaPnew7/R8O708GyG2Ilm+plo1AtiCWoWh3h4xYQddTKosXwDZbNZxqcdhhfVBEVt+GXGbgZ4B3jS2G8GvsX/PIsOm3bnhPDHkd3wVzz8PuioNazTrUcRtN/YeDTAH4Aau7DRpRSYgP7EaUOnYO0oFTej7BT150XUhoNOK1vQyNmJTto2AM8RX0oOWdyHNvO8PHQbjK7vdOlwQNyGH5GoQOPb6znqVaLRr6XgHpUOh82GF7JZ6EKjV180tnUm1BsG/I1qZj7zcE+hCvU+A9G59QZgLypve3vQrxRFwsXkPgKmSJEiRYoUKVLkhX8BOmN9sIMB4ZoAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle N{\\left(t \\right)} = C_{1} e^{r_{m} t}$"
      ],
      "text/plain": [
       "           rₘ⋅t\n",
       "N(t) = C₁⋅ℯ    "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dsolve(dN_dt)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": true,
   "user_envs_cfg": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing simply_trial.ipynb...

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: Nets.py
# Desc: plot university network linkages
# Input: python3 Nets.py
# Output: one graphical output in `results` subdirectory
# Arguments: 0
# Date: Nov 2019


"""plot university network linkages"""

__appname__="Nets.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

print("start import")
import networkx as nx ## network analysis
import scipy as sc ## calculation
import matplotlib.pyplot as p ## plot
import csv ## read input files
from matplotlib.lines import Line2D as L2D ## plot legend
print("finished import, start raw in")

## raw
links=list(csv.reader(open("../Data/QMEE_Net_Mat_edges.csv", newline="")))
l_0=links[0]
links.remove(links[0])
links=sc.matrix(links)
nodes=list(csv.reader(open("../Data/QMEE_Net_Mat_nodes.csv", newline="")))
print("finished raw in, start graphing")

## create graph object
G=nx.Graph()
n_0=[];n_2=[];l_3=[] ## can't link
for i in range(1,len(nodes)):
    if nodes[i][1] == "Hosting Partner": j='lime'
    elif nodes[i][1] == "University": j='blue'
    else: j='red' ## pyplot colour <https://matplotlib.org/3.1.0/gallery/color/named_colors.html>
    n_0.append(nodes[i][0]) ## node names
    n_2.append(j) ## node colour
    l_3.append(L2D([0], [0], color=j, label=nodes[i][1])) ## plot legend

n_1=[nodes[i][2] for i in range(1,(len(nodes)-1))] ## node weight
l_1=[];l_2=[] ## edges
for i in range((len(l_0)-1)):
    for j in range((i+1),len(l_0)):
        if int(links[j,i]) > 0:
            l_1.append((l_0[i],l_0[j]))
            l_2.append(int(links[j,i]))

G.add_nodes_from(n_0)
G.add_edges_from(tuple(l_1), weight=l_2)

G_1=nx.circular_layout(n_0)
print("finished graphing, start plotting")

## plotting
f1=p.figure()
nx.draw(G, G_1, node_color=n_2, edge_color='grey', with_labels=True, node_size=int(4e3))
## node_size=[int(n_1[i])*100 for i in range(len(n_1))]
## node colour <https://stackoverflow.com/questions/27030473/how-to-set-colors-for-nodes-in-networkx-python>
## named colours <https://matplotlib.org/3.1.0/gallery/color/named_colors.html>
f1.legend(handles=l_3, loc=10)
## main legend idea <https://matplotlib.org/3.1.0/gallery/text_labels_and_annotations/custom_legends.html>
## legend position <https://matplotlib.org/api/legend_api.html>
# p.show()
f1.savefig("../results/QMEENet_py.svg")
print("done")

exit**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
start import
finished import, start raw in
finished raw in, start graphing
finished graphing, start plotting
done

**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:126: MatplotlibDeprecationWarning: pyplot.hold is deprecated.
    Future behavior will be consistent with the long-time default:
    plot commands add elements without first clearing the
    Axes and/or Figure.
  b = plt.ishold()
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:138: MatplotlibDeprecationWarning: pyplot.hold is deprecated.
    Future behavior will be consistent with the long-time default:
    plot commands add elements without first clearing the
    Axes and/or Figure.
  plt.hold(b)
/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py:805: MatplotlibDeprecationWarning: axes.hold is deprecated. Please remove it from your matplotlibrc and/or style files.
  mplDeprecation)
/usr/local/lib/python3.5/dist-packages/matplotlib/rcsetup.py:155: MatplotlibDeprecationWarning: axes.hold is deprecated, will be removed in 3.0
  mplDeprecation)
/usr/local/lib/python3.5/dist-packages/matplotlib/figure.py:1506: UserWarning: No labeled objects found. Use label='...' kwarg on individual plots.
  warnings.warn("No labeled objects found. "

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
#!/bin/env R

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: TestR.R
# Desc: sample Rscript for python3 subprocess test
# Input: Rscript TestR.R
# Output: terminal output
# Arguments: 0
# Date: Nov 2019

print("R here")
**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "R here"

**********************************************************************

Code ran without errors

Time consumed = 0.09582s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: profileme.py
# Desc: timing code run-time
# Input: python3 profileme.py
# Output: terminal output on timed code report
# Arguments: 0
# Date: Nov 2019


"""timing code run-time"""

__appname__="profileme.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

def my_squares(iters):
    """squaring loop function"""
    out=[]
    for i in range(iters):
        out.append(i**2)
    return out

def my_join(iters, string):
    """for loop on joining textstrings"""
    out=""
    for i in range(iters):
        out+=string.join(", ")
    return out

def run_my_funcs(x,y):
    """printing results"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(int(1e7),"My string")**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.44466s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: LV4.py
# Desc: Consumer-Resource cycle plotting, discrete-time model with gaussian/normal distribution
# Input: python3 LV4.py
# Output: 1. two graphical outputs in `results` subdirectory; 2. final numbers terminal output
# Arguments: 0
# Date: Nov 2019


"""Consumer-Resource cycle plotting, discrete-time model with gaussian/normal distribution"""

__appname__="LV4.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import sys
import scipy as sc
import scipy.stats as stats
import matplotlib.pylab as p

## sys argv imput
if len(sys.argv) < 4:
    print("not enough inputs, using defaults")
    print("r=1  a=0.1  z=0.1  e=0.1")
    r=1.;a=.1;z=.1;e=.1
else:
    r=float(sys.argv[1]) ## intrinsic (per-capita) growth rate
    a=float(sys.argv[2]) ## per-capita "search-rate" for resource
    z=float(sys.argv[3]) ## mortality rate
    e=float(sys.argv[4]) ## consumer's efficiency for resource -> biomass

def LV():
    """adaptation for cProfile"""
    ## function
    def dCR_dt(pop, t):
        """Lotka-Volterra model, discrete time"""
        R=pop[0]
        C=pop[1]
        ep=float(stats.norm.rvs(size=1, scale=.05)) ## stochasticity
        R1=R*(1+(r+ep)*(1-R/K)-a*C)
        C1=C*(1-z+e*a*R)
        ## dimension analysis required (unit balance)
        ## automatically determine min time steps needed
        return sc.array([R1, C1])

    ## set initial start parameters
    t=sc.linspace(0,15,1e3)
    K=50 ## carrying capacity
    pops=sc.zeros(((len(t)),2))
    pops[0,:]=[10,5] ## initial population of resource & consumers
    for i in range(1,len(t)):
        pops[i,:]=dCR_dt(pops[(i-1),:],t[i])
        if pops[i,0] > K:
            pops[i,0]=K
        elif pops[i,0] < 0:
            pops[i,0]=0
        if pops[i,1] > K:
            pops[i,1]=K
        elif pops[i,1] < 0:
            pops[i,1]=0

    f1=p.figure(num=1);f1
    p.plot(t,pops[:,0], 'g-', label="Resource density") ## plot green line as 1st graphic entry
    p.plot(t,pops[:,1], "b-", label="Consumer density")
    p.grid()
    p.legend(loc="best")
    p.xlabel("Time")
    p.ylabel("Population density")
    p.title("Consumer-Resource population dynamics")
    ## text string for text box in graph
    tex='\n'.join((
        r'$r = %.2f$ time$^{-1}$' %(r, ),
        r'$a = %.2f$ area * time$^{-1}$' %(a, ),
        r'$z = %.2f$ time$^{-1}$' %(z, ),
        r'$e = %.2f$ [no unit]' %(e, )
    ))
    box=dict(boxstyle="round", facecolor="white",alpha=.8)

    p.text(9,max(pops[:,0])*.1,tex,bbox=box) ## <https://matplotlib.org/3.1.1/gallery/recipes/placing_text_boxes.html>
    # p.show()

    f2=p.figure(num=2);f2
    p.plot(pops[:,0],pops[:,1],'r-')
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.title("Consumer-Resource population dynamics")
    # p.show()

    f1.savefig("../results/LV4_model1.pdf")
    f2.savefig("../results/LV4_model2.pdf")

    ## print final values
    print("final Consumer population:",round(pops[(pops.shape[0]-1),1], 2), "individuals / units at time",t[len(t)-1])
    print("final Resource population:",round(pops[(pops.shape[0]-1),0], 2), "individuals / units at time",t[len(t)-1])

LV()
**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
not enough inputs, using defaults
r=1  a=0.1  z=0.1  e=0.1
final Consumer population: 8.13 individuals / units at time 15.0
final Resource population: 10.08 individuals / units at time 15.0

**********************************************************************

Code ran without errors

Time consumed = 1.19734s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
#!/bin/env R

# Author: Samraat Pawar s.pawar@imperial.ac.uk
# Script: fmr.R
# Desc: graph-plotting in R
# Input: Rscript fmr.R
# Output: pdf graph in `results` subdirectory
# Arguments: 0
# Date: Nov 2019

# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17831s

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: using_os.py
# Desc: trial on python3 os package
# Input: python3 using_os.py
# Output: terminal output
# Arguments: 0
# Date: Nov 2019


"""trial on python3 subprocess package"""

__appname__="using_os.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess
import re

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:
p=subprocess.Popen(["ls"], stdout=subprocess.PIPE)
stdout, stderr = p.communicate()
print(stdout.decode())

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")
subprocess.os.chdir(home)

# Create a list to store the results.
p=subprocess.Popen(["ls"], stdout=subprocess.PIPE)
stdout, stderr = p.communicate()
p=stdout.decode()
f_1=re.findall(r'\sC.+|\sC', p)
FilesDirsStartingWithC=[re.sub(r'\s+',"",f_1[i]) for i in range(len(f_1))]
print(FilesDirsStartingWithC)

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
	print(subprocess.os.path.join(str(dir), str(subdir), str(files)))
  
#################################
# Get files and directories in your home/ that start with either an upper or lower case 'C'

# Type your code here:
p=subprocess.Popen(["ls"], stdout=subprocess.PIPE)
stdout, stderr = p.communicate()
p=stdout.decode()
f_1=re.findall(r'\s[Cc].+|\s[Cc]', p)
f_0=[re.sub(r'\s+',"",f_1[i]) for i in range(len(f_1))]
print(f_0)

#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
p=subprocess.Popen(["ls"], stdout=subprocess.PIPE)
stdout, stderr = p.communicate()
p=stdout.decode()
f_1=re.findall(r'\s[Cc]\w+\s|\s[Cc]\s', p)
f_0=[re.sub(r'\s+',"",f_1[i]) for i in range(len(f_1))]
print(f_0)
**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
blackbirds.py
DrawFW.py
fmr.R
LV1.py
LV2.py
LV3.py
LV4.py
LV5.py
Nets.py
profileme2.py
profileme.py
__pycache__
regexs.py
run_fmr_R.py
run_LV.py
simply_trial.ipynb
TestR.py
TestR.R
timeitme.py
using_os.py

[]
/home/mhasoba/['.dbus', '.remmina', '.zoom', 'Music', '.VirtualBox', '.ssh', '.mume', '.jupyter', '.vscode', '.nano', '.mozilla', '.ipynb_checkpoints', '.fontconfig', '.dropbox', '.unison', '.Skype', '.gnome', '.pylint.d', '.QtWebEngineProcess', '.julia', '.aspnet', '.sage', '.gphoto', 'Desk
**********************************************************************

Code ran without errors

Time consumed = 1.85591s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: LV1.py
# Desc: Consumer-Resource cycle plotting
# Input: python3 LV1.py
# Output: two graphical outputs in `results` subdirectory
# Arguments: 0
# Date: Nov 2019


"""Consumer-Resource cycle plotting"""

__appname__="LV1.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

def LV():
    """adaptation for cProfile"""
    ## function
    def dCR_dt(pops, t=0):
        """Lotka-Volterra model"""
        R=pops[0]
        C=pops[1]
        dRdt=r*R-a*R*C
        dCdt=-z*C+e*a*R*C
        ## dimension analysis required (unit balance)
        ## automatically determine min time steps needed
        return sc.array([dRdt, dCdt])

    ## set initial start parameters
    r=1. ## intrinsic (per-capita) growth rate
    a=.1 ## per-capita "search-rate" for resource
    z=1.5 ## mortality rate
    e=.75 ## consumer's efficiency for resource -> biomass
    t=sc.linspace(0,15,1e3)
    R0=10;C0=5 ## initial population of resource & consumers
    RC0=sc.array([R0,C0])
    pops, infodict=integrate.odeint(dCR_dt, RC0, t, full_output=True);pops

    f1=p.figure(num=1);f1
    p.plot(t,pops[:,0], 'g-', label="Resource density") ## plot green line as 1st graphic entry
    p.plot(t,pops[:,1], "b-", label="Consumer density")
    p.grid()
    p.legend(loc="best")
    p.xlabel("Time")
    p.ylabel("Population density")
    p.title("Consumer-Resource population dynamics")
    # p.show()

    f2=p.figure(num=2);f2
    p.plot(pops[:,0],pops[:,1],'r-')
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.title("Consumer-Resource population dynamics")
    # p.show()

    f1.savefig("../results/LV1_model1.pdf")
    f2.savefig("../results/LV1_model2.pdf")

LV()
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.79039s

======================================================================
Inspecting script file LV5.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: LV5.py
# Desc: Consumer-Resource cycle plotting, discrete-time model with gaussian/normal distribution in both players
# Input: python3 LV5.py
# Output: 1. two graphical outputs in `results` subdirectory; 2. final numbers terminal output
# Arguments: 0
# Date: Nov 2019


"""Consumer-Resource cycle plotting, discrete-time model with gaussian/normal distribution in both players"""

__appname__="LV5.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import sys
import scipy as sc
import scipy.stats as stats
import matplotlib.pylab as p

## sys argv imput
if len(sys.argv) < 4:
    print("not enough inputs, using defaults")
    print("r=1  a=0.1  z=0.1  e=0.1")
    r=1.;a=.1;z=.1;e=.1
else:
    r=float(sys.argv[1]) ## intrinsic (per-capita) growth rate
    a=float(sys.argv[2]) ## per-capita "search-rate" for resource
    z=float(sys.argv[3]) ## mortality rate
    e=float(sys.argv[4]) ## consumer's efficiency for resource -> biomass

def LV():
    """adaptation for cProfile"""
    ## function
    def dCR_dt(pop, t):
        """Lotka-Volterra model, discrete time"""
        R=pop[0]
        C=pop[1]
        ep=float(stats.norm.rvs(size=1, scale=.01)) ## stochasticity
        R1=R*(2+r+ep-R/K-a*C)
        C1=C*(1-z+ep+e*a*R)
        ## dimension analysis required (unit balance)
        ## automatically determine min time steps needed
        return sc.array([R1, C1])

    ## set initial start parameters
    t=sc.linspace(0,15,1e3)
    K=50 ## carrying capacity
    pops=sc.zeros(((len(t)),2))
    pops[0,:]=[10,5] ## initial population of resource & consumers
    for i in range(1,len(t)):
        pops[i,:]=dCR_dt(pops[(i-1),:],t[i])
        if pops[i,0] > K:
            pops[i,0]=K
        elif pops[i,0] < 0:
            pops[i,0]=0
        if pops[i,1] > K:
            pops[i,1]=K
        elif pops[i,1] < 0:
            pops[i,1]=0


    f1=p.figure(num=1);f1
    p.plot(t,pops[:,0], 'g-', label="Resource density") ## plot green line as 1st graphic entry
    p.plot(t,pops[:,1], "b-", label="Consumer density")
    p.grid()
    p.legend(loc="best")
    p.xlabel("Time")
    p.ylabel("Population density")
    p.title("Consumer-Resource population dynamics")
    ## text string for text box in graph
    tex='\n'.join((
        r'$r = %.2f$ time$^{-1}$' %(r, ),
        r'$a = %.2f$ area * time$^{-1}$' %(a, ),
        r'$z = %.2f$ time$^{-1}$' %(z, ),
        r'$e = %.2f$ [no unit]' %(e, )
    ))
    box=dict(boxstyle="round", facecolor="white",alpha=.8)

    p.text(9,max(pops[:,0])*.1,tex,bbox=box) ## <https://matplotlib.org/3.1.1/gallery/recipes/placing_text_boxes.html>
    # p.show()

    f2=p.figure(num=2);f2
    p.plot(pops[:,0],pops[:,1],'r-')
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.title("Consumer-Resource population dynamics")
    # p.show()

    f1.savefig("../results/LV5_model1.pdf")
    f2.savefig("../results/LV5_model2.pdf")

    ## print final values
    print("final Consumer population:",round(pops[(pops.shape[0]-1),1], 2), "individuals / units at time",t[len(t)-1])
    print("final Resource population:",round(pops[(pops.shape[0]-1),0], 2), "individuals / units at time",t[len(t)-1])

LV()
**********************************************************************

Testing LV5.py...

LV5.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
not enough inputs, using defaults
r=1  a=0.1  z=0.1  e=0.1
final Consumer population: 19.08 individuals / units at time 15.0
final Resource population: 8.95 individuals / units at time 15.0

**********************************************************************

Code ran without errors

Time consumed = 1.16765s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: DrawFW.py
# Desc: network analysis in python3
# Input: python3 DrawFW.py
# Output: network graph in `results` subdirectory
# Arguments: 0
# Date: Nov 2019


"""network analysis in python3"""

__appname__="DrawFW.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

## adjacency list + node list -> network
## adjacency list: consumer & resource interaction coupling, can be repeated
## node list: id & property of node, multiple property of nodes

def GenRdmAdjList(N = 2, C = .5):
    """synthetic food web, avoid cannibalis"""
    ## .1-.4 normal connectence probability (10-40% chance selecting two directly-interactinve spp)
    Ids = range(N)
    Alst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C: ## coin-flipping, uniform distribution
            Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: ## avoid cannibalis
                Alst.append(Lnk)
    return Alst

## Real C = L/(N*(N-1)) ## avoid cannibalis
## Real C = L/N^2 ## allow cannibalis
## L = potential number of links in a network
## N = size of network / number of nodes

MaxN = 30 ## max number of players
C = .75 ## probability of establishing a link

AdjL = sc.array(GenRdmAdjList(MaxN, C)) ## construct adjacent list
Sps = sc.unique(AdjL) ## get species ids 
SizRan = ([-10,10]) ## use log10 scale
Sizs = sc.random.uniform(SizRan[0], SizRan[1], MaxN)

# p.hist(Sizs) ## log10 scale
# p.hist(10 ** Sizs) ## raw scale
# p.close() ## close all open plot objects

pos=nx.circular_layout(Sps)
G = nx.Graph()
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL))
NodSizs=int(1e3)*(Sizs-min(Sizs))/(max(Sizs)-min(Sizs))

f1=p.figure()
nx.draw_networkx(G, pos, node_size = NodSizs)
f1.savefig("../results/DrawFW_py.pdf")
**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: run_fmr_R.py
# Desc: call fmr.R from python3 terminal environment
# Input: python3 run_fmr_R.py
# Output: terminal output
# Arguments: 0
# Date: Nov 2019


"""call fmr.R from python3 terminal environment"""

__appname__="run_fmr_R.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import subprocess

subprocess.Popen("Rscript fmr.R 2> ../results/fmr_err.Rout", shell=True).wait()
with open('../results/fmr_err.Rout', 'r') as f: text = f.read()
if len(text) > 0: print("python3 announcement: unsuccessful run")
else: print("python3 announcement: successful run")
**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!
python3 announcement: successful run

**********************************************************************

Code ran without errors

Time consumed = 0.20782s

======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: run_LV.py
# Desc: profiling and export outputs
# Input: python3 run_LV.py
# Output: terminal outputs
# Arguments: 0
# Date: Nov 2019


"""profiling and export outputs"""

__appname__="run_LV.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

## profiling using bash <https://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script>
## profiling using python3 <https://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script>
import cProfile
import os, glob ## clear directory <https://stackoverflow.com/questions/185936/how-to-delete-the-contents-of-a-folder-in-python>

files=glob.glob("../results/*")
for f in files:
    os.remove(f)

## self-recognition <https://stackoverflow.com/questions/50499/how-do-i-get-the-path-and-name-of-the-file-that-is-currently-executing>
# import inspect, os
# # a=inspect.getfile(inspect.currentframe()) # script filename (usually with path)
# a=os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
# os.chdir(a)

## profiling
import LV1
cProfile.run('LV1.LV()', sort="tottime")

import LV2
cProfile.run('LV2.LV()', sort="tottime")

import LV3
cProfile.run('LV3.LV()', sort="tottime")

import LV4
cProfile.run('LV4.LV()', sort="tottime")

import LV5
cProfile.run('LV5.LV()', sort="tottime")
**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
         100723 function calls (97810 primitive calls) in 0.126 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      142    0.007    0.000    0.007    0.000 {method 'set_text' of 'matplotlib.ft2font.FT2Font' objects}
      512    0.006    0.000    0.006    0.000 {method 'load_char' of 'matplotlib.ft2font.FT2Font' objects}
2196/1224    0.006    0.000    0.011    0.000 backend_pdf.py:141(pdfRepr)
     2787    0.005    0.000    0.005   
**********************************************************************

Code ran without errors

Time consumed = 3.76386s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/bin/env python3

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: LV2.py
# Desc: Consumer-Resource cycle plotting
# Input: python3 LV2.py
# Output: 1. two graphical outputs in `results` subdirectory; 2. final numbers terminal output
# Arguments: 0
# Date: Nov 2019


"""Consumer-Resource cycle plotting"""

__appname__="LV2.py"
__author__="PMH"
__version__="0.0.1"
__license__="None"

import sys
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

def LV():
    """adaptation for cProfile"""
    ## sys argv imput
    if len(sys.argv) < 4:
        print("not enough inputs, using defaults")
        print("r=1  a=0.1  z=1.5  e=0.75")
        r=1.;a=.1;z=1.5;e=.75
    else:
        r=float(sys.argv[1]) ## intrinsic (per-capita) growth rate
        a=float(sys.argv[2]) ## per-capita "search-rate" for resource
        z=float(sys.argv[3]) ## mortality rate
        e=float(sys.argv[4]) ## consumer's efficiency for resource -> biomass

    ## function
    def dCR_dt(pops, t=0):
        """Lotka-Volterra model"""
        R=pops[0]
        C=pops[1]
        dRdt=r*R*(1-R/K)-a*R*C
        dCdt=-z*C+e*a*R*C
        ## dimension analysis required (unit balance)
        ## automatically determine min time steps needed
        return sc.array([dRdt, dCdt])

    ## set initial start parameters
    t=sc.linspace(0,15,1e3)
    K=37 ## carrying capacity
    R0=10;C0=5 ## initial population of resource & consumers
    RC0=sc.array([R0,C0])
    pops, infodict=integrate.odeint(dCR_dt, RC0, t, full_output=True);pops

    f1=p.figure(num=1);f1
    p.plot(t,pops[:,0], 'g-', label="Resource density") ## plot green line as 1st graphic entry
    p.plot(t,pops[:,1], "b-", label="Consumer density")
    p.grid()
    p.legend(loc="best")
    p.xlabel("Time")
    p.ylabel("Population density")
    p.title("Consumer-Resource population dynamics")
    ## text string for text box in graph
    tex='\n'.join((
        r'$r = %.2f$ time$^{-1}$' %(r, ),
        r'$a = %.2f$ area * time$^{-1}$' %(a, ),
        r'$z = %.2f$ time$^{-1}$' %(z, ),
        r'$e = %.2f$ [no unit]' %(e, )
    ))
    box=dict(boxstyle="round", facecolor="white",alpha=.8)

    p.text(9,12,tex,bbox=box) ## <https://matplotlib.org/3.1.1/gallery/recipes/placing_text_boxes.html>
    # p.show()

    f2=p.figure(num=2);f2
    p.plot(pops[:,0],pops[:,1],'r-')
    p.grid()
    p.xlabel("Resource density")
    p.ylabel("Consumer density")
    p.title("Consumer-Resource population dynamics")
    # p.show()

    f1.savefig("../results/LV2_model1.pdf")
    f2.savefig("../results/LV2_model2.pdf")

    ## print final values
    print("final Consumer population:",round(pops[(pops.shape[0]-1),1], 2), "individuals / units at time",t[len(t)-1])
    print("final Resource population:",round(pops[(pops.shape[0]-1),0], 2), "individuals / units at time",t[len(t)-1])

LV()
**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
not enough inputs, using defaults
r=1  a=0.1  z=1.5  e=0.75
final Consumer population: 4.7 individuals / units at time 15.0
final Resource population: 19.9 individuals / units at time 15.0

**********************************************************************

Code ran without errors

Time consumed = 1.01890s

======================================================================
Inspecting script file simply_trial-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:49.307149Z",
     "start_time": "2019-11-15T12:07:49.298725Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.613272Z",
     "start_time": "2019-11-15T12:07:50.067720Z"
    }
   },
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.672448Z",
     "start_time": "2019-11-15T12:07:53.664111Z"
    }
   },
   "outputs": [],
   "source": [
    "x=var('x')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.733934Z",
     "start_time": "2019-11-15T12:07:53.728262Z"
    }
   },
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:07:53.779776Z",
     "start_time": "2019-11-15T12:07:53.775490Z"
    }
   },
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## bio cal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:09:00.972073Z",
     "start_time": "2019-11-15T12:09:00.965699Z"
    }
   },
   "outputs": [],
   "source": [
    "r_m, N, t = var(\"r_m N t\", real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:09:11.307036Z",
     "start_time": "2019-11-15T12:09:11.302289Z"
    }
   },
   "outputs": [],
   "source": [
    "N=Function(\"N\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:11:44.194164Z",
     "start_time": "2019-11-15T12:11:44.100282Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ4AAAAhCAYAAAAoGRLbAAAABHNCSVQICAgIfAhkiAAABbdJREFUeJztm2loHVUUx3+pMW2IUKX9YEMtrqlr81LTxKB1wQ1cKki1qCiPIrVCFZR+UVwRoVoVF1BToVSIomirRf1gBGs11drW2lhoXVBTNda6oZYmGjTxwznDu5k3M2/mzrwl5f7gMcm5yzvzz13OXQIOh8NhyVLgq2o7kYRJ1XbAkQk5YEe1nUiCa3gHBzng02o74Ti4yQEbgGFgJ9ABHAAuqaZTjmieB34GmmLmPx0YA24sm0fJOAH4E1gBHA9cCgwgPjaX+buTage1p581vciLjCEvFcQqTb/SZ58HjAK3B5S5TctcG5D2GrAXOMzC36x5G3jRZ3sO2BezvK1+UdrBxNHPmt8oCPdQSJ7tmj7LZ+8F/gAaA8r0aJnZAWkdmnanhb9ZcpT6Mc9nfxppkHGw1S9KO5gY+llzLPICW4FB4JuAPJOBEYpHgBakx64KqXs3sB+oi0jfg/1iLI/4fq5leYAFwL9Ag8++mfBGZGKrXyntwEK/rFe15yEv9wjS0tcDv6vtlJR1t+tzK7AWOIbi3t8KHAp84rMvRkR52Wdfob6diEwFoxRGhOuNfC8hI8CFqd4gHWPAIUjj8JgPdBJvRWurX5h2kEK/rBveXH2eCvSpI91IXPJ5yro94bYBr+jPV0fkMbkA+A8ZHUy2I0EzwIfA/cbnPSPfJn1Ws+FtA/5BOvVxyMKiR9Pi7OHZ6hemHdSQfi8grX0/cEbGdb+rdc9BOswgsqIzWa15Fhi2JmSK2hlS7xItsyTiu6dqni1JnVbypJ9qAa5BpqxhCn/oA8QbQGz0K6UdVEa/kuzWL1iccb11SHA7BNSr7Un9rk4j32cUby20qK03pO5nNb09JN1jGPgpkdcF8mTT8Gyx1a+UdpCRfgMU5ug4nx6jbBMyJO8j+yncE+AjwzZfbY/q741I7/zRV7ZL8wXFKCC9cITxsVMQg1p/KQZIpuGaGHWmxVa/UtqBpX71vsSvgb9LVGBiOtmKNLi3kNguS4Jij03I/tBCYDnQhgTf/vhuWJ9TAuqtB04DdiHxUxSNRl1RPA4c7rPlgCuQeGjAl1aJM1Zb/aK0g/Lol5hlSO+4KSR9pqYvQuKNIaAfWRG1A++rbQvFe3CPadm8z/6U2ruAW/Xne3x5mtXeF+DTHE1bHfViSIcaRTqmDXnsptokI2fQx8NWvyjtIIV+WU6J3orWP+J4tOrzZiQo7kSG5zXAw8gGYxcwneId8rDVqrk6C8uzF/iF4M3NnD5LbUfMRuKkSt8AqUv58bDVL0o7SKFf1g1vhPAVUA45Z1wEbNR87yBbA1chvapf02YY5SYh08AQsngx6UMC1oUU9qT84o4ho+l05HzTZJo+/4p8s8IKfUOJfJUk7h28NPpFaQcp9Muq4U0GTkYa00hInlbgTcbvis8C1iFHOabtW+N3b3NyB7J4MRlFNkNnar7vkYNsP2v1ebHP7m2UPgisBO5DOoGfi/S71wekVQv/HbyVBB+dpdUvTDuoAf28WwjdEXm+ROJAk+8ojjt+RUZFjxu07idC6j2HQkyzLiRPA9LgPw5IWwZ8gSyqxhARTaYiQfHrIXXHIU/22ymbGX/+uRF4ICBfWv2itIPK6GeNt9VypmGbhjjaati8g/CWMvhwh9bdlrDcLVrurMw9ik/UHbwGZJYxFxW7Mv5+W+2gyvp1IQ3PvMt1PtJLzC2dy5FTj3LcjJ6C7Pq/kaBMI7Jl9GoZ/IlLqTt4kyjMOB3AkcARGftgox3UgH5LKT6rXU7xQuAuwpfuWXA2cC/xLzOehMQtR5fJnzjEuYN3GRLgh90OyYKk2kFt6OewIO4dvLuBDyrlVBa4f/apbdqQEKXfZ5/L+BXthPtnH9fwapu4d/BakQN+hyMTZiALsG4Kd/D2ULh86TGA3NNrpvic2OGwIs4dvOuAH5AN4Wcq7aDD4XA4HA6Hw+FwVI3/AZbu/XGvJZmHAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle - r_{m} N{\\left(t \\right)} + \\frac{d}{d t} N{\\left(t \\right)}$"
      ],
      "text/plain": [
       "           d       \n",
       "-rₘ⋅N(t) + ──(N(t))\n",
       "           dt      "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t)-r_m*N(t)\n",
    "dN_dt\n",
    "## cal N at any given time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-11-15T12:14:50.878582Z",
     "start_time": "2019-11-15T12:14:50.409951Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHwAAAAaCAYAAAB1szj5AAAABHNCSVQICAgIfAhkiAAABVNJREFUaIHtmXuIVFUcxz+7iu7mikVUJhplabX0sNQ1wtYiKbIgKLIy0rSI2HZ7CP5REUkRbVqUFq4JoYUhrWulUdEWUUqQpWZpmr3UdK20tqzcrF2d/view5zunvuYaWZW5X7hMjO/1/2de+7vdQZSpEhxRGA28HaQWN4DjqTID71zlK8BPi6GIy5eAHYD/XLQGQlkgNuK4tHhicHomdwAvAfsB6Yl1O0D/GP07bUpSqHVERwZIrPA8K9xaKOBg8D0EJ17jc4kD+9V4AegKsqxEmEY8BiwFtgDdJrPd4E64KgS+HAlelafAhOAU4FjE+qWkw2iGmAgcEyUwi9kN/zxEJl1hn+SQ2sFfgMqQ3QWG53TPbwaw7s/yrEiowx4hGx0fAg0AY3AErLPZVUJfHkA+As4LU/9q4Df0ZoiMRQt6hOgDfjOI9MXPZSfHNpwFN0LImxvBv6IcGIzsJ2e6ysWorV/AZzr4VeijVhYAl+agWX/Q/9BEr6YE9Gi5wFzzffRARkbjW86tEZDu9Rj0/J8182O3EOGdnkSRwuM6WRrXf8Y2bAMlgTXAm8BP6Og+RpltV4Bua+Auzz6K4A5wEfAFrQXy1Gg1Dlyy9D+xWIWWvg04CLzfXZAps7QH3Zoa4Au/M3aRGAR2TQ507mGOHLjjcwTSRwtIE5E6bMTOKtI9+iFykIGbXIT8DTatAxqdi36AQeAsR47W4Fbzfd5wAfoBR2KsrLFN4Q0wcFWf5T5XANsBHYB1wEzQmSsgyNQSt7nuUczcDQwBS0sLO1bh2tD+C7uMTaTYj3wWoStCvRSbszBZi6YgzruRpRuuwx9BvA+MBn1S5uAcwxvfcBGf1QOn3doc1GZPB7VbIvewBnAIKAD9VbdUGYYHWRfBJvWxzhynxvaIPN7uPndGrZaYL6RGRUhA4q0H2NkALYRXiZ816IIWzbKLklw33wwBvU3YS/c7eb+U83vO4AvPXIXAEud36vQ+AZwNcoYFjcBO819m1wjboQPAwag+mDfwKVAA0rLq1H9qkYj1C4jY8eFX0MWBHA+SpkbImQA2oETYmQATk4gkwRVZF/Y1QWyGUQDCqYOVMaCsGXENqvzzRXE2SjYLAajTbU899m+ZK5ITEILf8ahlaON3W6cvtDIrHBkRhja8hC7vVHkBlOUD+0oRZUKpyDfvSkvBrXoObQZG7eEyO0mWRYaH3O/uSiSQb3PSof3MmrgYuFGuE23ax3aQdTx1aOUEqzfoAVB+MFANaqR62J8KUd1eWuMHBSuhtueoxI1VgdysFmFav6L5vKhAjgObc64HGz74HbtO/hvr3N9PgZXojct2KnWGvpTaGEZdPpjUYY2fU+I3clGpyHm/mcauSTz5zYKV8OtLd9I6SLqfOBP/BFeSXa2P6RQjlLpPrrPhOWoZu9AnXgGdYUuWgzddzJkj1SnxPgw1cjV5+J4AXC3ue8W1NkGUQZcgaaNMIRtOMBndD+GdjGW7s+86KgmOyf78CzZaPnew7/R8O708GyG2Ilm+plo1AtiCWoWh3h4xYQddTKosXwDZbNZxqcdhhfVBEVt+GXGbgZ4B3jS2G8GvsX/PIsOm3bnhPDHkd3wVzz8PuioNazTrUcRtN/YeDTAH4Aau7DRpRSYgP7EaUOnYO0oFTej7BT150XUhoNOK1vQyNmJTto2AM8RX0oOWdyHNvO8PHQbjK7vdOlwQNyGH5GoQOPb6znqVaLRr6XgHpUOh82GF7JZ6EKjV180tnUm1BsG/I1qZj7zcE+hCvU+A9G59QZgLypve3vQrxRFwsXkPgKmSJEiRYoUKVLkhX8BOmN9sIMB4ZoAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle N{\\left(t \\right)} = C_{1} e^{r_{m} t}$"
      ],
      "text/plain": [
       "           rₘ⋅t\n",
       "N(t) = C₁⋅ℯ    "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dsolve(dN_dt)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": true,
   "user_envs_cfg": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing simply_trial-checkpoint.ipynb...

======================================================================
Inspecting script file Data_in_python3-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Data_in_python3-checkpoint.ipynb...

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!