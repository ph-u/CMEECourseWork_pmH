Starting weekly assessment for Pok Man, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 560.34 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, seminar, Week5, Week2, Week9, Week4, .git, ReadmeProg, Week3, MiniProject

Found the following files in parent directory: README.txt, LICENSE, .gitignore, readme.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
._*
*.sw*
nohup*
.Rhistory
readme_final.md
*.*#
*-*.pdf
*-concordance.tex
*.log
*.synctex.gz
.Rapp.history
*.mov
*.mp4
*.gif
p_*
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
PokMan Ho CMEE Coursework Repository
Do I like this better?
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Code, Data, Sandbox, results

Found the following files: readme.md, FirstExample.pdf, readme_hand.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:
**********************************************************************
![alt text](https://unichoices.co.uk/wp-content/uploads/2015/09/Imperial-College-London.jpg)

# 2019 PokMan HO MRes CMEE Coursework Week01

This week's foci were on: sh tex git

## License

Apache-2.0

## Getting started

Intended OS: MacOS Mojave (ver10.14.6)
```
brew install git
brew install texlive-full
brew install imagemagick
```

## Guides

Multiple scripts were coded and introduced below in filename alphabetical order.  
All scripts are in `Code` directory

### CompileLaTeX.sh

#### Features

1. make LaTeX script (with `bib` bibliography file) into pdf
2. `TeX` and `bib` files must have same filename

#### Input

```
./CompileLaTeX.sh <tex without extension>
```

#### Output

saves the output into a .pdf file in `Data` subdirectory
*****

### ConcatenateTwoFiles.sh

#### Features

end-to-head merge two files in sequence

#### Input

```
./ConcatenateTwoFiles.sh <infile_1> <infile_2> <outfile>
```

#### Output

1. saves the output into an `outfile` in designated subdirectory
2. terminal output of `outfile` content

*****

### CountLines.sh

#### Features

count number of lines within input file

#### Input

```
./CountLines.sh <infile>
```

#### Output

terminal output on number of lines in `infile`
*****

### FirstExample.tex

#### Features

1. `LaTeX` file fulfilling assignment needs
2. as `infile` for testing usability of `CompileLaTeX.sh`

#### Input

```
none
```

#### Output

none
*****

### MyExampleScript.sh

#### Features

print "Hello (username)" in two variable-coding methods

#### Input

```
./MyExampleScript.sh
```

#### Output

two-lined duplicated "Hello" messages under two coding methods
*****

### UnixPrac1.txt

#### Features

Unix-coding homework containing answers to 5 questions

#### Input

none (this is not a `shell` script but a text file containing commands)

#### Output

multi-lined terminal output on 5 questions:  

1. three-lined output: line-count of three fasta files in `Data` subdirectory  
2. multi-lined terminal output on whole E.coli genome (source in `Data` subdirectory)  
3. one number terminal output on whole E.coli genome length (source in `Data` subdirectory)  
4. one number terminal output on number of pattern "ATGC" within whole E.coli genome (source in `Data` subdirectory)  
5. a number rounded to 2-decimal places showing AT:GC ratio of whole E.coli genome (source in `Data` subdirectory)  

*****

### csvtospace.sh

#### Features

substitute the commas in the file with space

#### Input

```
./csvtospace.sh <csv>
```

#### Output

saves the output into a .txt file in `Data` subdirectory
*****

### myboilerplate.sh

#### Features

simple boilerplate for shell scripts

#### Input

```
./myboilerplate.sh
```

#### Output

one-lined terminal output

*****

### tabtocsv.sh

#### Features

substitute the tabs in the files with commas

#### Input

```
./tabtocsv.sh <txt>
```

#### Output

saves the output into a .csv file in `Data` subdirectory
*****

### tiff2png.sh

#### Features

transform a tiff to png format

#### Input

```
./tiff2png.sh <tiff>
```

#### Output

saves the output into a .png file in `Data` subdirectory
*****

### variables.sh

#### Features

test out interactive variables usage

#### Input

```
./variables.sh
```

#### Output

terminal outputs in interactive mode
*****

## Reference

[https://docs.readme.com/docs/best-practices][01]  
[https://github.com/jehna/readme-best-practices/blob/master/README-default.md][02]  

[01]:https://docs.readme.com/docs/best-practices
[02]:https://github.com/jehna/readme-best-practices/blob/master/README-default.md**********************************************************************

Found following files in results directory: .null...

Found 12 code files: ConcatenateTwoFiles.sh, myboilerplate.sh, CountLines.sh, variables.sh, CompileLaTeX.sh, tiff2png.sh, csvtospace.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: end-to-head merge two files in sequence
# Input: ./ConcatenateTwoFiles.sh <infile_1> <infile_2> <outfile>
# Output: 1. saves the output into an `outfile` in designated subdirectory; 2. terminal output of `outfile` content
# Arguments: 1
# Date: Oct 2019

if [ -z $1 ];then
    echo -e "No input"
    exit
elif [ -z $2 ];then
    echo -e "Not enough input"
    exit
elif [ -z $3 ];then
    echo -e "No designated output"
    exit
fi

cat $1 > $3
cat $2 >> $3
echo -e "Merged File is $3"
cat $3
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
No input

**********************************************************************

Code ran without errors

Time consumed = 0.00846s

======================================================================
Inspecting script file myboilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Input: ./myboilerplate.sh
# Output: one-lined terminal output
# Arguments: 0
# Date: Oct 2019

echo -e "\nThis is a shell script!\n"

#exit**********************************************************************

Testing myboilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script!


**********************************************************************

Code ran without errors

Time consumed = 0.00896s

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: CountLines.sh
# Desc: count number of lines within input file
# Input: ./CountLines.sh <infile>
# Output: terminal output on number of lines in `infile`
# Arguments: 1
# Date: Oct 2019

if [ -z $1 ];then
    echo -e "No input"
    exit
fi
NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
No input

**********************************************************************

Code ran without errors

Time consumed = 0.00760s

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: variables.sh
# Desc: test out interactive variables usage
# Input: ./variables.sh
# Output: terminal outputs in interactive mode
# Arguments: interactive
# Date: Oct 2019

# Shows the use of variables
MyVar="some string"
echo "the current value of the variable is" $MyVar
echo "Please enter a new string"
read MyVar
echo "the current value of the variable is" $MyVar

## Reading multiple values
echo "Enter two numbers separated by space(s)"
read a b
a=${a:-0}
b=${b:-0}
mysum=`expr $a + $b`
echo "you entered $a" and "$b".  "Their sum is:" $mysum
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
the current value of the variable is some string
Please enter a new string
the current value of the variable is
Enter two numbers separated by space(s)
you entered 0 and 0. Their sum is: 0

**********************************************************************

Code ran without errors

Time consumed = 0.01030s

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: CompileLaTeX.sh
# Desc: 1. make LaTeX script (with `bib` bibliography file) into pdf; 2. `TeX` and `bib` files must have same filename
# Input: ./CompileLaTeX.sh <tex without extension>
# Output: saves the output into a .pdf file in `Data` subdirectory
# Arguments: 1
# Date: Oct 2019

if [ -z $1 ];then
    echo -e "No input"
    exit
fi
pdflatex $1.tex
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex
# evince $1.pdf &

## Cleanup
for i in aux dvi log nav out snm toc bbl bcf blg run.xml synctex.gz;do
if [ `ls|grep -c ${i}` -gt 0 ];then
rm *.${i}
fi
done

if [ `ls|grep -c "blx.bib"` -gt 0 ];then
rm *blx.bib
fi

mv *.pdf ../Data/
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 

**********************************************************************
No input

**********************************************************************

Code ran without errors

Time consumed = 0.00824s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: tiff2png.sh
# Desc: transform a tiff to png format
# Input: ./tiff2png.sh <tiff>
# Output: saves the output into a .png file in `Data` subdirectory
# Arguments: 1
# Date: Oct 2019

for f in `ls ../Data/*.tif*`;do
	echo "Converting $f"
	convert "$f" "../Data/$(basename $f|cut -f 1 -d ".").png"
# 	convert "$f" "$(basename "$f" .tif).png"
done
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Converting ../Data/test2.tiff
Converting ../Data/test.tiff

**********************************************************************

Code ran without errors

Time consumed = 2.78662s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: csvtospace.sh
# Desc: substitute the commas in the file with space
# Input: ./csvtospace.sh <csv>
# Output: saves the output into a .txt file in `Data` subdirectory
# Arguments: 1
# Date: Oct 2019

for i in `ls ../Data/*.csv`;do
	a=`basename ${i} | cut -f 1 -d "."`
	sed -e "s/,/ /g" ${i} > ../Data/${a}.txt
done

exit
**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02912s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************

% Author: PokMan Ho pok.ho19@imperial.ac.uk
% Script: FirstExample.tex
% Desc: 1. `LaTeX` file fulfilling assignment needs; 2. as `infile` for testing usability of `CompileLaTeX.sh`
% Input: none
% Output: none
% Arguments: 0
% Date: Oct 2019

\documentclass[12pt]{article}
\title{A Simple Document}
\author{PokMan Ho}
\date{}
\begin{document}
	\maketitle
	\begin{abstract}
		This paper must be cool!
	\end{abstract}
	\section{Introduction}
		Blah Blah!
	\section{Materials \& Methods}
	One of the most famous equations is:
	\begin{equation}
		E = mc^2
	\end{equation}
	This equation was first proposed by Einstein in 1905\cite{einstein1905does}.

	\bibliographystyle{plain}
	\bibliography{FirstBiblio}
\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: CountLines.sh
# Desc: print "Hello (username)" in two variable-coding methods
# Input: ./MyExampleScript.sh
# Output: two-lined duplicated "Hello" messages under two coding methods
# Arguments: 0
# Date: Oct 2019

msg1="Hello"
msg2=$USER
echo "$msg1 $msg2"
echo "Hello $USER"
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00438s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Annalen der Physik},
  volume={18},
  number={13},
  pages={639--41},
  year={1905}
}
**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
## line count all files
wc -l ../Data/*.fasta|head -n 3

## print all from 2nd line onwards
tail -n +2 ../Data/E.coli.fasta

## count seq length E.coli genome
tail -n +2 ../Data/E.coli.fasta|tr -d "\n"|wc -c ## extract genome, pipe through new-line char removal, pipe through character count

## count matched "ATGC" pattern
tail -n +2 ../Data/E.coli.fasta|tr -d "\n"|grep -o "ATGC"|wc -l ## after pipe through new-line char, pipe to list all pattern presence, pipe through counting list length

## compute AT:GC
a=`tail -n +2 ../Data/E.coli.fasta|tr -d "\n"|grep -o "A\|T"|wc -l`&&c=`tail -n +2 ../Data/E.coli.fasta|tr -d "\n"|grep -o "C\|G"|wc -l`&&echo "scale=2;" "${a}/${c}"|bc -l ## extract & save the four components as 2 variables (numerator & denominator respectively), then apply the equation (A+T)/(G+C)
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: tabtocsv.sh
# Desc: substitute the tabs in the files with commas
# Input: ./tabtocsv.sh <txt>
# Output: saves the output into a .csv file in `Data` subdirectory
# Arguments: 1
# Date: Oct 2019

if [ -z $1 ];then
    echo -e "No input"
    exit
fi
echo "Creating a comma delimited version of $1"
a=`basename $1|cut -f 1 -d "."`
cat $1 | tr -s "\t" "," > ../Data/${a}.csv
echo "Done!"
exit
**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
No input

**********************************************************************

Code ran without errors

Time consumed = 0.00657s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!