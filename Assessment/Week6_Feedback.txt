Starting weekly assessment for Pok Man, Week6

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 560.34 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, seminar, Week5, Week2, Week9, Week4, .git, ReadmeProg, Week3, MiniProject

Found the following files in parent directory: README.txt, LICENSE, .gitignore, readme.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
._*
*.sw*
nohup*
.Rhistory
readme_final.md
*.*#
*-*.pdf
*-concordance.tex
*.log
*.synctex.gz
.Rapp.history
*.mov
*.mp4
*.gif
p_*
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
PokMan Ho CMEE Coursework Repository
Do I like this better?
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week6 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK6...

Found the following directories: Code, Data, Sandbox, results

Found the following files: readme.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:
**********************************************************************
![alt text](https://unichoices.co.uk/wp-content/uploads/2015/09/Imperial-College-London.jpg)

# 2019 PokMan HO MRes CMEE Coursework Week6

This week's focus was on: R 

## License

Apache-2.0

## Guides

Multiple scripts were coded and introduced below in filename alphabetical order.  
All scripts are in `Code` directory

### GenomeDesc.R

#### Features

classwork program based on structure same as `bear.csv`

#### Suggested input

```
Rscript GenomeDesc.R <csv>
```

#### Output

1. five analysis result `csv` outputs in `results` subdirectory; 2. two graphical plots in `result` subdirectory
*****

### coalescence.R

#### Features

classwork program based on killer whale data files

#### Suggested input

```
Rscript coalescence.R
```

#### Output

R terminal output
*****

### gecko.R

#### Features

classwork program based on gecko data files

#### Suggested input

```
Rscript gecko.R
```

#### Output

R terminal output
*****

### turtle.R

#### Features

classwork program based on turtle data files

#### Suggested input

```
Rscript turtle.R
```

#### Output

R terminal output
*****

## Reference

[https://docs.readme.com/docs/best-practices][01]  
[https://github.com/jehna/readme-best-practices/blob/master/README-default.md][02]  

[01]:https://docs.readme.com/docs/best-practices
[02]:https://github.com/jehna/readme-best-practices/blob/master/README-default.md**********************************************************************

Found following files in results directory: bears_inbreeding_coef.pdf, turtle_01.pdf, bears_genotype_counts.csv, bears_allele_freq.pdf, bears_allele_freq.csv, coalescence_02.pdf, bears_genotype_freq.csv, bears_heterozygosity.csv, coalescence_01.pdf, bears_Chi_InbreedCoef.csv...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 4 code files: gecko.R, turtle.R, GenomeDesc.R, coalescence.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file gecko.R...

File contents are:
**********************************************************************
#!/bin/env R

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: gecko.R
# Desc: classwork program based on gecko data files
# Input: Rscript gecko.R
# Output: R terminal output
# Arguments: 0
# Date: Nov 2019

## lib

## raw
a.file<-list.files(path = "../Data/", pattern = "_gec")
for(i in 1:length(a.file)){
  assign(paste0("a.",substr(a.file[i],1,3)),read.csv(paste0("../Data/",a.file[i]),header = F, stringsAsFactors = F))
};rm(i)

## data handling
a<-list(a.ben, a.leo, a.wes)
rm(list=ls(pattern="a."))

## list parallel data filtering
for(i in 1:length(a)){
  print(i)
  for(j in 1:dim(a[[i]])[2]){
    a[[i]][,j]<-as.character(a[[i]][,j])
  }
  a[[i]][a[[i]] == "TRUE"] <- "T"
  
  # ## prepare data filter
  # a.0<-vector(mode = "list", length = length(a))
  # for(j in 1:length(a.0)){
  #   a.0[[j]]<-as.data.frame(matrix(nrow = (dim(a[[i]])[1]/2), ncol = 0))
  # };rm(j)
  # 
  # ## -SNP
  # for(j in 1:dim(a[[i]])[2]){
  #   cat(paste0("-SNP for ","a[[",i,"]] col ",j,"\n"))
  #   tmp<-c()
  #   for(k in seq(1,dim(a[[i]])[1],2)){
  #     if(isTRUE(a[[i]][k,j] == a[[i]][(k+1),j])){
  #       tmp<-c(tmp,a[[i]][k,j])
  #       tmp.nam<-colnames(a[[i]][j])
  #     }else{
  #       break
  #     }
  #   } ## k loop
  #   if(length(tmp)==dim(a.0[[i]])[1]){
  #     cat(paste0("Got one for ","a[[",i,"]]\n"))
  #     a.0[[i]][,(dim(a.0[[i]])[2]+1)]<-tmp
  #     colnames(a.0[[i]])[dim(a.0[[i]])[2]]=tmp.nam
  #     rm(tmp.nam)
  #   }
  # } ## j loop
};rm(i) #rm(i,j,k) ## i loop

## do it manually, 4 CPU can't handle the data in one go -- !SNP
## bent-toed gecko
a.ben<-as.data.frame(matrix(nrow = (dim(a[[1]])[1]/2), ncol = 0))
for(i in 1:dim(a[[1]])[2]){
  if(i%%1000==0){cat(paste0("doing col ",i/1e3,"K out of ",dim(a[[1]])[2]/1e3,"K\n"))}
  tmp<-c()
  tmp.n<-colnames(a[[1]][i])
  for(j in seq(1,dim(a[[1]])[1],2)){
    if(a[[1]][j,i] == a[[1]][(j+1),i]){tmp<-c(tmp,a[[1]][j,i])}else{break}
  }
  if(length(tmp)==dim(a.ben)[1]){
    a.ben[,(dim(a.ben)[2]+1)]<-tmp
    colnames(a.ben)[dim(a.ben)[2]]<-tmp.n
  }
};rm(i,j,tmp,tmp.n)
for(i in 1:dim(a.ben)[1]){
  cat(paste0("doing row ",i," out of ",dim(a.ben)[1],"\n"))
  for(j in 1:dim(a.ben)[2]){
  if(j%%1e3==0){cat(paste0("doing col ",j/1e3,"K out of ",dim(a.ben)[2]/1e3,"K\n"))}
    if(a.ben[1,j]!=a.ben[i,j]){print("no")}
  }
};rm(i,j)

## leopard gecko
a.leo<-as.data.frame(matrix(nrow = (dim(a[[2]])[1]/2), ncol = 0))
for(i in 1:dim(a[[2]])[2]){
  if(i%%1000==0){cat(paste0("doing col ",i/1e3,"K out of ",dim(a[[2]])[2]/1e3,"K\n"))}
  tmp<-c()
  tmp.n<-colnames(a[[2]][i])
  for(j in seq(1,dim(a[[2]])[1],2)){
    if(a[[2]][j,i] == a[[2]][(j+1),i]){tmp<-c(tmp,a[[2]][j,i])}else{break}
  }
  if(length(tmp)==dim(a.leo)[1]){
    a.leo[,(dim(a.leo)[2]+1)]<-tmp
    colnames(a.leo)[dim(a.leo)[2]]<-tmp.n
  }
};rm(i,j,tmp,tmp.n)
for(i in 1:dim(a.leo)[1]){
  cat(paste0("doing row ",i," out of ",dim(a.leo)[1],"\n"))
  for(j in 1:dim(a.leo)[2]){
    if(j%%1e3==0){cat(paste0("doing col ",j/1e3,"K out of ",dim(a.leo)[2]/1e3,"K\n"))}
    if(a.leo[1,j]!=a.leo[i,j]){print("no")}
  }
};rm(i,j)
tmp<-c();for(i in 1:dim(a.leo)[1]){
  tmp<-c(tmp,paste0(a.leo[i,],collapse = ""))
};rm(i);
str(as.factor(tmp))

## western-banded gecko
a.wes<-as.data.frame(matrix(nrow = (dim(a[[3]])[1]/2), ncol = 0))
for(i in 1:dim(a[[3]])[2]){
  if(i%%1000==0){cat(paste0("doing col ",i/1e3,"K out of ",dim(a[[3]])[2]/1e3,"K\n"))}
  tmp<-c()
  tmp.n<-colnames(a[[3]][i])
  for(j in seq(1,dim(a[[3]])[1],2)){
    if(a[[3]][j,i] == a[[3]][(j+1),i]){tmp<-c(tmp,a[[3]][j,i])}else{break}
  }
  if(length(tmp)==dim(a.wes)[1]){
    a.wes[,(dim(a.wes)[2]+1)]<-tmp
    colnames(a.wes)[dim(a.wes)[2]]<-tmp.n
  }
};rm(i,j,tmp,tmp.n)
for(i in 1:dim(a.wes)[1]){
  cat(paste0("doing row ",i," out of ",dim(a.wes)[1],"\n"))
  for(j in 1:dim(a.wes)[2]){
    if(j%%1e3==0){cat(paste0("doing col ",j/1e3,"K out of ",dim(a.wes)[2]/1e3,"K\n"))}
    if(a.wes[1,j]!=a.wes[i,j]){print("no")}
  }
};rm(i,j)

## grep the majority with topology [a.leo, [a.ben, a.wes]]
## use "the majority rules" assumption (a.leo only)
a.com<-merge(a.ben[1,],a.wes[1,], all = T)
d.BW<-sum(is.na(a.com))/dim(a.com)[2]
cat(paste0("divergence of bent-toed and western banded geckos is ",d.BW,"\n"))
a.com<-merge(a.com,a.leo[2,], all = T)
d.CL<-sum(is.na(a.com))/dim(a.com)[2]
cat(paste0("divergence of leopard and common ancestor of the other geckos is ",d.CL,"\n"))
## div time for later species
cat(paste0("divergence time of bent-toed and western banded geckos is ",round(d.BW/(d.CL/30),2)," Mya\n"))
**********************************************************************

Testing gecko.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1

**********************************************************************

Code ran without errors

Time consumed = 10.01160s

======================================================================
Inspecting script file turtle.R...

File contents are:
**********************************************************************
#!/bin/env R

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: turtle.R
# Desc: classwork program based on turtle data files
# Input: Rscript turtle.R
# Output: R terminal output
# Arguments: 0
# Date: Nov 2019

## lib
library(ggplot2)

## raw data
a.0<-read.csv("../Data/turtle.csv", header = F)
b.0<-read.csv("../Data/turtle.genotypes.csv",header = F)
c.0<-read.csv("../Data/turtle_markers.csv", header = F)

# ## heterozygosity method
# a.1<-as.data.frame(matrix(nrow = 4, ncol = 3))
# a.1[,1]<-seq(1:4)
# k<-1;for(i in seq(1,dim(a.0)[1],20)){a.1[k,2]<-sum(a.0[i:(i+19),]==0)/(dim(a.0)[1]/4*dim(a.0)[2]);a.1[k,3]<-a.1[k,2]*(1-a.1[k,2]);k<-k+1};rm(i,k)
# 
# ### pairwise & total Fst
# a.2<-as.data.frame(matrix(nrow = factorial(4)/(factorial(2)*factorial(4-2)), ncol = 5))
# colnames(a.2)=c("Pop1","Pop2","Hs","Ht","Fst")
# a.2[,1]<-c(rep(1,4),2,3)
# a.2[,2]<-c(2,3,4,3,4,4)
# for(i in 1:dim(a.2)[1]){
#   a.2[i,3]<-a.1[a.2[i,1],3]+a.1[a.2[i,2],3]
#   a.2[i,4]<-a.2[i,3]+(a.1[a.2[i,1],2]-a.1[a.2[i,2],2])^2/2
#   a.2[i,5]<-(a.2[i,4]-a.2[i,3])/a.2[i,4]
# };rm(i);mean(a.2[,5])
# 
# ## isolation by spatial distance
# a.1$dist.km<-c(5,10,12,50)
# b.1<-hclust(dist(b.0))
# plot(b.1)

## fA on count 1
a.1<-matrix(nrow = 4, ncol = dim(a.0)[2])
for(i in 1:dim(a.1)[1]){for(j in 1:dim(a.1)[2]){a.1[i,j]<-sum(a.0[((i-1)*20+1):(i*20),j])/20}};rm(i,j)
a.2<-a.1*(1-a.1) ## Hs
a.3<-a.4<-matrix(nrow = factorial(4)/(factorial(2)*factorial(4-2)), ncol = dim(a.2)[2])
a.r<-data.frame("First"=c(rep(1,3),2,2,3),"Second"=c(2,3,4,3,4,4))
for(i in 1:dim(a.r)[1]){
  i.1<-a.r[i,1];i.2<-a.r[i,2] ## set pairwise comparison targets
  a.3[i,]<-a.2[i.1,]+a.2[i.2,] ## Hs pairwise
  a.4[i,]<-a.3[i,]+(a.1[i.1,]-a.1[i.2,])^2/2 ## Ht pairwise
};rm(i,i.1,i.2)
a.5<-(a.4-a.3)/a.4 ## Fst

## spatial dist
a.ref<-data.frame(seq(1,4),c(5,10,12,50))
for(i in 1:dim(a.r)[1]){
  a.r$dist[i]<-a.ref[which(a.r$First[i]==a.ref[,1]),2]+a.ref[which(a.r$Second[i]==a.ref[,1]),2]};rm(i)

for(i in 1:dim(a.r)[1]){ ## print subpop Fst result
  a.r$den[i]<-mean(as.numeric(as.character(a.5[i,])), na.rm = T) ## Fst
  print(paste0(LETTERS[a.r[i,1]]," vs ",LETTERS[a.r[i,2]]," Fst: ",round(a.r$den[i],4)))
  };rm(i)

## plot -- real phy-tree: [A,[B, [C,D]]]; D = A + ^B + C; heavy genetic exchange
pdf("../results/turtle_01.pdf")
ggplot(data = a.r, aes(x=a.r$dist, y=a.r$den))+xlab("Spatial Dist. (km)")+ylab("Pairwise genetic dist (Pairwise Fst)")+theme_bw()+geom_point()
dev.off()

## stat test Spearman correlation
cor.test(y=a.r$den, x=a.r$dist, method = "spearman")
**********************************************************************

Testing turtle.R...

Output (only first 500 characters): 

**********************************************************************
[1] "A vs B Fst: 0.0946"
[1] "A vs C Fst: 0.0935"
[1] "A vs D Fst: 0.0925"
[1] "B vs C Fst: 0.0306"
[1] "B vs D Fst: 0.0288"
[1] "C vs D Fst: 0.0223"
null device 
          1 

	Spearman's rank correlation rho

data:  a.r$dist and a.r$den
S = 68, p-value = 0.01667
alternative hypothesis: true rho is not equal to 0
sample estimates:
       rho 
-0.9428571 


**********************************************************************

Code ran without errors

Time consumed = 1.74255s

======================================================================
Inspecting script file GenomeDesc.R...

File contents are:
**********************************************************************
#!/bin/env R

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: GenomeDesc.R
# Desc: classwork program based on structure same as `bear.csv`
# Input: Rscript GenomeDesc.R <csv>
# Output: 1. five analysis result `csv` outputs in `results` subdirectory; 2. two graphical plots in `result` subdirectory
# Arguments: 0 or 1
# Date: Nov 2019

## lib
library(ggplot2)
library(reshape2) ## melting df
library(scales) ## rescale ggplot without eliminate bars

## grep data from bash
args=(commandArgs(T))

## colours
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#e79f00", "#9ad0f3", "#F0E442", "#999999", "#cccccc", "#6633ff", "#00FFCC", "#0066cc")

if(length(args) !=1){
	a.nam<-"../Data/bears.csv"
}else{a.nam<-args[1]}
a<-read.csv(a.nam, header=F,stringsAsFactors = F)
colnames(a)=seq(1:dim(a)[2])

## SNP id -- rmb row 1,2 = one individual (Q1)
cat("SNP extraction\n")
a.0<-as.data.frame(matrix(nrow=dim(a)[1], ncol=0))
for(i in 1:dim(a)[2]){
	if(length(unique(a[,i]))>1){
		a.0[,(dim(a.0)[2]+1)]<-a[,i]
		colnames(a.0)[dim(a.0)[2]]=colnames(a)[i]
	}
};rm(i)

## SNP freq (Q2)
cat("counting allele freq\n")
a.1<-as.data.frame(matrix(0,nrow=4, ncol=dim(a.0)[2]))
colnames(a.1)=colnames(a.0)
row.names(a.1)=c("A","T","C","G")
for(i in 1:dim(a.0)[2]){
	tmp<-table(a.0[,i])
	for(j in 1:length(tmp)){
		a.1[which(names(tmp[j])==row.names(a.1)),i]<-unname(tmp[j])
	}
};rm(i,j,tmp)

## genotype freq (Q3)
cat("counting genotype freq\n")
a.2<-as.data.frame(matrix(0,nrow=17, ncol=dim(a.0)[2]))
colnames(a.2)=colnames(a.0)
row.names(a.2)=c("AA","TT","CC","GG","AT","TA","AC","CA","AG","GA","TC","CT","TG","GT","CG","GC","heterozygous")
tmp<-c()
for(i in 1:dim(a.0)[2]){
	for(j in seq(1,dim(a)[1],2)){
		tmp<-c(tmp,paste(a.0[c(j:(j+1)),i],collapse=""))
	}
	tmp<-table(tmp)
	for(k in 1:length(tmp)){
		a.2[which(names(tmp[k])==row.names(a.2)),i]<-unname(tmp[k])
	}
};rm(i,j,k,tmp)
for(i in 1:dim(a.2)[2]){
  a.2[17,i]<-sum(a.2[5:16,i])
};rm(i)
a.2<-a.2[c(1:4,17),]

## homo/heterozygosity calculations (Q4)
cat("calculating heterozygosity\n")
a.3<-as.data.frame(matrix(nrow = 2, ncol = dim(a.0)[2]))
row.names(a.3)=c("heterozygosity","homozygosity")
colnames(a.3)=colnames(a.0)
a.3[1,]<-a.2[5,]/(dim(a)[1]/2)
a.3[2,]<-1-a.3[1,]
# a.3[3,]<-prod(a.2[which(a.2[1:4,]!=0),])*2
# a.4[4,]<-sum(a.2[which(a.2[1:4,]!=0),]^2)

## genotype counts (Q5)
cat("counting genotypes\n")
a.4<-as.data.frame(matrix(nrow = 5, ncol = dim(a.0)[2]))
row.names(a.4)=row.names(a.2)
colnames(a.4)=colnames(a.0)
for(i in 1:dim(a.4)[1]){
  a.4[i,]<-a.2[i,]/sum(a.2[(1:dim(a.2)[1]),])
};rm(i)

## Chi-sq test on HWE (Q5,6)
cat("calculating statistics\n")
a.5<-as.data.frame(matrix(nrow = 4, ncol = dim(a.0)[2]))
row.names(a.5)=c("X^2","df","p.val","inbreed.coef")
colnames(a.5)=colnames(a.0)
for(i in 1:dim(a.2)[2]){
  tmp<-data.frame("Genotype"=row.names(a.2),"freq"=a.2[,i])
  tmp<-tmp[which(tmp[,2]!=0),]
  tmp<-chisq.test(x=tmp$Genotype,y=tmp$freq)
  a.5[1,i]<-unname(tmp$statistic)
  a.5[2,i]<-unname(tmp$parameter)
  a.5[3,i]<-unname(tmp$p.value)
  a.5[4,i]<-1-a.2[5,i]/(prod(a.2[which(a.2[1:4,i]>0),i])*2)
};rm(i,tmp)

## visualizations
bn<-read.table(text = a.nam,sep = "/",stringsAsFactors = F)
bn<-read.table(text = bn[1,dim(bn)[2]],sep = ".",stringsAsFactors = F)[1,1]

cat("Plotting graphs\n")
## graph on Q2
p.2<-melt(t(a.1),variable.name="Seq",value.name = "freq")
p.2<-p.2[which(p.2[,3]!=0),]
pdf(paste0("../results/",bn,"_allele_freq.pdf"), width = 20)
ggplot()+theme_bw()+
  xlab("SNP position")+ylab("Number of individuals")+
  theme(axis.text.x = element_text(angle = 90))+
  scale_fill_manual(name="Allele", values = cbbPalette)+
  scale_y_continuous(breaks = seq(0,dim(a)[1],5))+
  geom_col(aes(x=as.factor(p.2[,1]),y=p.2[,3],fill=p.2[,2]))
dev.off()

## graph on Q6
p.6<-melt(t(a.5[4,]),value.name = "inb_coef")
pdf(paste0("../results/",bn,"_inbreeding_coef.pdf"), width = 20)
ggplot()+theme_bw()+
  xlab("SNP position")+ylab("Inbreeding Coefficient")+
  theme(axis.text.x = element_text(angle = 90),
        axis.text.y = element_text(size = 20))+
  scale_y_continuous(limits = c(.75,1),oob = rescale_none)+ ## <https://stackoverflow.com/questions/10365167/geom-bar-bars-not-displaying-when-specifying-ylim>
  geom_col(aes(x=as.factor(p.6[,1]), y=p.6[,3]))
dev.off()

## export results
cat("printing calculation results\n")
write.csv(a.1,paste0("../results/",bn,"_allele_freq.csv"), quote = F)
write.csv(a.2,paste0("../results/",bn,"_genotype_freq.csv"), quote = F)
write.csv(a.3,paste0("../results/",bn,"_heterozygosity.csv"), quote = F)
write.csv(a.4,paste0("../results/",bn,"_genotype_counts.csv"), quote = F)
write.csv(a.5,paste0("../results/",bn,"_Chi_InbreedCoef.csv"), quote = F)
**********************************************************************

Testing GenomeDesc.R...

Output (only first 500 characters): 

**********************************************************************
SNP extraction
counting allele freq
counting genotype freq
calculating heterozygosity
counting genotypes
calculating statistics
Plotting graphs
null device 
          1 
null device 
          1 
printing calculation results

**********************************************************************

Encountered error (or warning):
There were 50 or more warnings (use warnings() to see the first 50)

======================================================================
Inspecting script file coalescence.R...

File contents are:
**********************************************************************
#!/bin/env R

# Author: PokMan Ho pok.ho19@imperial.ac.uk
# Script: coalescence.R
# Desc: classwork program based on killer whale data files
# Input: Rscript coalescence.R
# Output: R terminal output
# Arguments: 0
# Date: Nov 2019

## Hypothesis: Population sizes of Northern and Southern Atlantic killer whales different

## lib
library(ggplot2)

## raw
a.N<-read.csv("../Data/killer_whale_North.csv", header = F)
a.S<-read.csv("../Data/killer_whale_South.csv", header = F)
sn<-dim(a.N)[2]

## get SNP
a.0<-c();for(i in 1:dim(a.N)[2]){if(length(unique(a.N[,i]))>1){a.0<-c(a.0,i)}};rm(i);a.N<-a.N[,a.0];rm(a.0)
a.0<-c();for(i in 1:dim(a.S)[2]){if(length(unique(a.S[,i]))>1){a.0<-c(a.0,i)}};rm(i);a.S<-a.S[,a.0];rm(a.0)

## result df
res<-as.data.frame(matrix(nrow = 4, ncol = 0))
res$source<-c(rep("a.N",2),rep("a.S",2))
res$func<-c("Watterson","Tajima")
## Watterson's estimator
wat<-function(df){
  S=dim(df)[2]
  n=dim(df)[1]
  a<-rep(NA,(n-1))
  for(i in 1:(n-1)){a[i]<-1/i};rm(i)
  a<-sum(a)
  return(S/a)
}

## Tajima's estimator
taj<-function(df){
  n=dim(df)[1]
  a=rep(NA,(n-1)^2)
  for(i in 1:(n-1)){
    for(j in (i+1):n){
      ij<-0
      for(p in 1:dim(df)[2]){
        if(isTRUE(df[i,p]!=df[j,p])){ij<-ij+1}
      };rm(p)
      a<-c(a,ij)
    };rm(j)
  };rm(i)
  return(sum(a, na.rm = T)*2/(n*(n-1)))
}

res$est<-c(wat(a.N), taj(a.N), wat(a.S), taj(a.S))

## total substitution
theta<-4*dim(a.N)[1]*1e-8*sn

## effective popn size
res$effective<-res$est/(4*sn*1e-8)

{## site frequency spectrum flattens (from lower freq side, exp-dist -> flat) when popultion drops
  res.p<-as.data.frame(matrix(nrow = (dim(a.N)[2]+dim(a.S)[2]), ncol = 1))[,-1]
  res.p$source<-c(rep("a.N",dim(a.N)[2]),rep("a.S",dim(a.S)[2]))
  for(i in 1:dim(a.N)[2]){res.p[i,2]<-sum(a.N[,i])};rm(i)
  for(i in 1:dim(a.S)[2]){res.p[(i+dim(a.N)[2]),2]<-sum(a.S[,i])};rm(i)
  a.N.count<-table(res.p[which(res.p$source=="a.N"),2])
  a.N.count<-data.frame("s"=names(a.N.count),"d"=unname(a.N.count)/sum(unname(a.N.count)))[,-2]
  a.N.count$t<-"a.N"
  a.S.count<-table(res.p[which(res.p$source=="a.S"),2])
  a.S.count<-data.frame("s"=names(a.S.count),"d"=unname(a.S.count)/sum(unname(a.S.count)))[,-2]
  a.S.count$t<-"a.S"
  
  a.NS<-rbind(a.N.count, a.S.count);rm(a.N.count, a.S.count)
  a.tot<-table(res.p[,2])
  a.tot<-data.frame("s"=names(a.tot),"d"=unname(a.tot)/sum(unname(a.tot)))[,-2]
}

pdf("../results/coalescence_01.pdf")
ggplot()+theme_bw()+
  xlab("Site Frequency Spectrum")+ylab("SFS density")+
  scale_fill_discrete(name="Source", label=c("North", "South"))+
  geom_col(aes(x=as.numeric(as.character(a.NS$s)), y=as.numeric(a.NS$d.Freq), fill=a.NS$t), position="dodge") ## <https://stackoverflow.com/questions/38101512/the-same-width-of-the-bars-in-geom-barposition-dodge>
dev.off()

pdf("../results/coalescence_02.pdf")
ggplot()+theme_bw()+
  xlab("Site Frequency Spectrum")+ylab("SFS density")+
  geom_col(aes(x=as.numeric(as.character(a.tot$s)), y=as.numeric(a.tot$d.Freq)))
dev.off()
**********************************************************************

Testing coalescence.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.02126s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!